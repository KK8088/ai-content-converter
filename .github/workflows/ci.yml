name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  security-events: write
  actions: read
  pages: write
  id-token: write

jobs:
  # 基础检查
  basic-check:
    name: 基础检查
    runs-on: ubuntu-latest

    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 检查文件结构
      run: |
        echo "检查项目文件结构..."
        ls -la
        echo "检查HTML文件..."
        if [ -f "index.html" ]; then
          echo "✅ index.html 存在"
        else
          echo "❌ index.html 不存在"
          exit 1
        fi
        echo "检查CSS文件..."
        if [ -d "css" ]; then
          echo "✅ css 目录存在"
          ls -la css/
        else
          echo "❌ css 目录不存在"
          exit 1
        fi
        echo "检查JS文件..."
        if [ -d "js" ]; then
          echo "✅ js 目录存在"
          ls -la js/
        else
          echo "❌ js 目录不存在"
          exit 1
        fi

    - name: HTML语法检查
      run: |
        echo "检查HTML语法..."
        # 简单的HTML语法检查
        if grep -q "<!DOCTYPE html>" index.html; then
          echo "✅ HTML5 DOCTYPE 正确"
        else
          echo "❌ 缺少HTML5 DOCTYPE"
          exit 1
        fi

  # 功能测试
  functional-test:
    name: 功能测试
    runs-on: ubuntu-latest
    needs: [basic-check]

    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 设置Python环境
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: 启动测试服务器
      run: |
        echo "启动本地服务器..."
        python -m http.server 8080 &
        sleep 5

    - name: 测试服务器响应
      run: |
        echo "测试服务器响应..."
        curl -f http://localhost:8080/ || exit 1
        echo "✅ 服务器响应正常"

    - name: 检查关键文件可访问性
      run: |
        echo "检查CSS文件..."
        curl -f http://localhost:8080/css/styles.css || exit 1
        echo "检查JS文件..."
        curl -f http://localhost:8080/js/config.js || exit 1
        echo "✅ 关键文件可访问"

  # 安全扫描
  security:
    name: 安全扫描
    runs-on: ubuntu-latest
    needs: [basic-check]

    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 检查敏感信息
      run: |
        echo "🔍 检查敏感信息..."

        # 检查常见的敏感信息模式
        SENSITIVE_PATTERNS=(
          "api_key"
          "secret"
          "password"
          "token"
          "private_key"
          "access_key"
          "auth_token"
        )

        FOUND_SENSITIVE=false

        for pattern in "${SENSITIVE_PATTERNS[@]}"; do
          if grep -r -i "$pattern" --exclude-dir=.git --exclude-dir=archive . 2>/dev/null; then
            echo "⚠️ 发现可能的敏感信息: $pattern"
            FOUND_SENSITIVE=true
          fi
        done

        if [ "$FOUND_SENSITIVE" = false ]; then
          echo "✅ 未发现敏感信息"
        else
          echo "❌ 发现敏感信息，请检查并移除"
          exit 1
        fi

    - name: JavaScript安全检查
      run: |
        echo "🔍 JavaScript安全检查..."

        # 检查常见的JavaScript安全问题
        echo "检查eval()使用..."
        if grep -r "eval(" js/ 2>/dev/null; then
          echo "⚠️ 发现eval()使用，可能存在安全风险"
        else
          echo "✅ 未发现eval()使用"
        fi

        echo "检查innerHTML使用..."
        if grep -r "innerHTML" js/ 2>/dev/null; then
          echo "⚠️ 发现innerHTML使用，请确保输入已清理"
        else
          echo "✅ 未发现innerHTML使用"
        fi

        echo "检查document.write使用..."
        if grep -r "document.write" js/ 2>/dev/null; then
          echo "⚠️ 发现document.write使用，可能存在XSS风险"
        else
          echo "✅ 未发现document.write使用"
        fi

        echo "✅ JavaScript安全检查完成"

    - name: 依赖安全检查
      run: |
        echo "🔍 依赖安全检查..."

        # 检查是否有外部依赖
        if [ -f "package.json" ]; then
          echo "检查package.json依赖..."
          if grep -q '"dependencies"' package.json && ! grep -q '{}' package.json; then
            echo "⚠️ 发现外部依赖，建议进行安全审计"
          else
            echo "✅ 无外部依赖，安全风险较低"
          fi
        fi

        # 检查CDN链接
        echo "检查CDN链接..."
        if grep -r "https://cdn\|http://cdn" . --exclude-dir=.git --exclude-dir=archive 2>/dev/null; then
          echo "⚠️ 发现CDN链接，请确保来源可信"
        else
          echo "✅ 未发现CDN链接"
        fi

        echo "✅ 依赖安全检查完成"

  # 质量检查完成通知
  quality-check-complete:
    name: 质量检查完成
    runs-on: ubuntu-latest
    needs: [basic-check, functional-test, security]
    if: always()

    steps:
    - name: 质量检查结果
      run: |
        echo "📊 质量检查结果汇总:"
        echo "   - 基础检查: ${{ needs.basic-check.result }}"
        echo "   - 功能测试: ${{ needs.functional-test.result }}"
        echo "   - 安全扫描: ${{ needs.security.result }}"
        echo ""

        if [ "${{ needs.basic-check.result }}" == "success" ] && \
           [ "${{ needs.functional-test.result }}" == "success" ] && \
           [ "${{ needs.security.result }}" == "success" ]; then
          echo "✅ 所有质量检查通过！"
          echo "🚀 项目已准备好部署"
        else
          echo "❌ 质量检查未完全通过"
          echo "⚠️ 请修复失败的检查项后再部署"
        fi
