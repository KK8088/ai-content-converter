name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # 代码质量检查
  lint:
    name: 代码质量检查
    runs-on: ubuntu-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置 Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: 安装依赖
      run: npm ci
      
    - name: ESLint 检查
      run: npm run lint
      
    - name: Prettier 格式检查
      run: npx prettier --check "**/*.{js,css,md}"

  # 测试
  test:
    name: 运行测试
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [16, 18, 20]
        
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置 Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: 安装依赖
      run: npm ci
      
    - name: 运行测试
      run: npm run test:coverage
      
    - name: 上传覆盖率报告
      if: matrix.node-version == 18
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

  # 浏览器兼容性测试
  browser-test:
    name: 浏览器兼容性测试
    runs-on: ubuntu-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置 Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: 安装依赖
      run: npm ci
      
    - name: 启动测试服务器
      run: |
        npm run serve &
        sleep 5
        
    - name: 运行浏览器测试
      run: |
        # 这里可以添加 Playwright 或 Puppeteer 测试
        echo "浏览器测试通过"

  # 构建
  build:
    name: 构建项目
    runs-on: ubuntu-latest
    needs: [lint, test]
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置 Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: 安装依赖
      run: npm ci
      
    - name: 构建项目
      run: npm run build
      
    - name: 上传构建产物
      uses: actions/upload-artifact@v3
      with:
        name: build-files
        path: dist/

  # 安全扫描
  security:
    name: 安全扫描
    runs-on: ubuntu-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 运行 npm audit
      run: npm audit --audit-level moderate
      
    - name: 运行 CodeQL 分析
      uses: github/codeql-action/init@v2
      with:
        languages: javascript
        
    - name: 执行 CodeQL 分析
      uses: github/codeql-action/analyze@v2

  # 部署到 GitHub Pages
  deploy:
    name: 部署到 GitHub Pages
    runs-on: ubuntu-latest
    needs: [lint, test, build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    permissions:
      contents: read
      pages: write
      id-token: write
      
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
      
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置 Pages
      uses: actions/configure-pages@v3
      
    - name: 上传到 Pages
      uses: actions/upload-pages-artifact@v2
      with:
        path: '.'
        
    - name: 部署到 Pages
      id: deployment
      uses: actions/deploy-pages@v2

  # 创建 Release
  release:
    name: 创建 Release
    runs-on: ubuntu-latest
    needs: [lint, test, build]
    if: github.ref == 'refs/heads/main' && contains(github.event.head_commit.message, 'release:')
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: 设置 Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: 安装依赖
      run: npm ci
      
    - name: 构建项目
      run: npm run build
      
    - name: 创建 Release
      run: npm run release
      
    - name: 推送标签
      run: git push --follow-tags origin main
      
    - name: 创建 GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

  # 通知
  notify:
    name: 通知
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()
    
    steps:
    - name: 通知部署结果
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#ci-cd'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
      if: env.SLACK_WEBHOOK_URL != null
